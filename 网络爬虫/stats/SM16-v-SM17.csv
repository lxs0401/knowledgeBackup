Date, Element No, Used interval, SM16 Interval (new), SM17 Interval (new), SM17/SM16 Interval ratio, R (SM16), R (SM17)(exp), R (SM17), Grade, Success, abs RM16, abs RM17 (expected), abs RM17 (predicted), abs R-Metric, sqr R-Metric, Title,
Aug 31 2018 22:49:25,8,1,3,4,1.26,0.975,0.964,0.964,5,1,0.0246,0.0362,0.0362,-0.0116,-0.0007,然后用Requests来获取咱们的目标网页：. [python代码]
Sep 12 2018 23:49:33,8,12,38,28,0.74,0.723,0.952,0.951,5,1,0.2769,0.0481,0.0485,0.2283,0.0743,然后用Requests来获取咱们的目标网页：. [python代码]
Sep 12 2018 23:50:07,33,13,2,1,0.5,0.48,0.651,0.651,2,0,0.4804,0.651,0.651,-0.1707,-0.1931,4.2 BeautifulSoup遍历方法. 4.2.1 节点和标签名. 可以使用子节点、父节点、 及标签名的方式遍历：. soup.head #查找head标签. soup.p #查找第一个p标签. #对标签的直接子节点进行循环. for child in title_tag.children:.     print(child)soup .
9月 12 2018 23:50:30,47,13,40,14,0.34,0.55,0.606,0.606,5,1,0.4503,0.3936,0.3936,0.0567,0.0478,soup.find_all(_title_) . # [<title>The Dormouse_s story</title>] 查找所有tittle标签. # soup.find_all(_p__ _title_) . # [<p class=_title_><b>The Dormouse_s story</b></p>] .
9月 12 2018 23:50:58,23,13,2,4,1.77,0.482,0.252,0.417,2,0,0.4824,0.252,0.417,0.0654,0.0588,from bs4 import BeautifulSoup. html_doc = ___. <html><head><title>The Dormouse_s story</title></head>. <body>. <p class=_title_><b>The Dormouse_s story</b></p>. <p .
9月 12 2018 23:51:26,40,13,2,1,0.5,0.438,0.553,0.553,1,0,0.438,0.5531,0.5531,-0.1152,-0.1141,4.2.2 搜索文档树. 最常用的当然是find()和find_all()啦，当然还有其他的。比如find_parent() 和 find_parents()、 find_next_sibling() 和 find_next_siblings() 、find_all_next() 和 find_next()、find_all_previous() .
9月 12 2018 23:51:44,25,13,2,1,0.68,0.427,0.252,0.595,2,0,0.4271,0.252,0.5947,-0.1676,-0.1713,from bs4 import BeautifulSoup. html_doc = ___. <html><head><title>The Dormouse_s story</title></head>. <body>. <p class=_title_><b>The Dormouse_s story</b></p>. <p .
9月 12 2018 23:52:04,37,13,38,13,0.35,0.458,0.583,0.583,4,1,0.5422,0.4172,0.4172,0.125,0.12,4.2.2 搜索文档树. 最常用的当然是find()和find_all()啦，当然还有其他的。比如find_parent() 和 find_parents()、 find_next_sibling() 和 find_next_siblings() 、find_all_next() 和 find_next()、find_all_previous() .
9月 12 2018 23:52:36,21,13,39,15,0.38,0.5,0.671,0.671,3,1,0.4998,0.3289,0.3289,0.1709,0.1416,4.1 BeautifulSoup对象的类型. Beautiful Soup将复杂HTML文档转换成一个复杂的树形结构，每个节点都是Python对象。所有对象可以归纳为4种类型: Tag _ NavigableString _ BeautifulSoup _ Comment 。下面我们分别看看这四种类型都是什么东西。. 4.1.1 Tag .
9月 12 2018 23:52:48,24,13,41,17,0.4,0.535,0.252,0.648,5,1,0.4651,0.748,0.352,0.1131,0.0924,from bs4 import BeautifulSoup. html_doc = ___. <html><head><title>The Dormouse_s story</title></head>. <body>. <p class=_title_><b>The Dormouse_s story</b></p>. <p .
9月 12 2018 23:52:57,39,13,42,16,0.39,0.564,0.389,0.693,4,1,0.4355,0.6107,0.3068,0.1287,0.0956,4.2.2 搜索文档树. 最常用的当然是find()和find_all()啦，当然还有其他的。比如find_parent() 和 find_parents()、 find_next_sibling() 和 find_next_siblings() 、find_all_next() 和 find_next()、find_all_previous() .
Sep 20 2018 18:27:52,40,8,14,12,0.85,0.75,0.606,0.766,5,1,0.25,0.3936,0.234,0.0159,0.0077,4.2.2 搜索文档树. 最常用的当然是find()和find_all()啦，当然还有其他的。比如find_parent() 和 find_parents()、 find_next_sibling() 和 find_next_siblings() 、find_all_next() 和 find_next()、find_all_previous() .
Sep 20 2018 18:28:18,44,21,65,18,0.28,0.537,0.501,0.501,4,1,0.4628,0.4985,0.4985,-0.0358,-0.0344,soup.find_all(_title_) . # [<title>The Dormouse_s story</title>] 查找tittle标签. [.]. # [<p class=_title_><b>The Dormouse_s story</b></p>] 查找参数为title的标签. # soup.find_all(_a_) . # .
Sep 20 2018 18:28:33,10,21,3,1,0.33,0.504,0.586,0.586,2,0,0.5043,0.5856,0.5856,-0.0813,-0.0886,5.1 get 请求. get请求还可以传递参数：. [.]
Sep 20 2018 18:29:29,28,21,66,17,0.26,0.541,0.38,0.38,4,1,0.4588,0.6203,0.6203,-0.1615,-0.1743,from bs4 import BeautifulSoup. html_doc = ___. <html><head><title>The Dormouse_s story</title></head>. <body>. <p class=_title_><b>The Dormouse_s story</b></p>. <p .
Sep 20 2018 18:29:40,33,8,15,14,0.9,0.787,0.441,0.791,5,1,0.213,0.5593,0.2092,0.0038,0.0016,4.2 BeautifulSoup遍历方法. 4.2.1 节点和标签名. 可以使用子节点、父节点、 及标签名的方式遍历：. soup.head #查找head标签. soup.p #查找第一个p标签. #对标签的直接子节点进行循环. for child in title_tag.children:.     print(child)soup .
Sep 20 2018 18:30:05,25,8,2,1,0.62,0.721,0.441,0.81,2,0,0.721,0.4407,0.8102,-0.0892,-0.1366,from bs4 import BeautifulSoup. html_doc = ___. <html><head><title>The Dormouse_s story</title></head>. <body>. <p class=_title_><b>The Dormouse_s story</b></p>. <p .
Sep 20 2018 18:30:27,34,21,63,28,0.45,0.48,0.111,0.7,4,1,0.5197,0.8889,0.2996,0.2201,0.1803,4.2 BeautifulSoup遍历方法. 4.2.1 节点和标签名. 可以使用子节点、父节点、 及标签名的方式遍历：. soup.head #查找head标签. soup.p #查找第一个p标签. #对标签的直接子节点进行循环. for child in title_tag.children:.     print(child)soup .
Sep 20 2018 18:30:51,23,8,2,2,0.93,0.716,0.441,0.81,2,0,0.7159,0.4407,0.8102,-0.0943,-0.1439,from bs4 import BeautifulSoup. html_doc = ___. <html><head><title>The Dormouse_s story</title></head>. <body>. <p class=_title_><b>The Dormouse_s story</b></p>. <p .
Oct 15 2018 21:06:36,8,33,76,136,1.79,0.928,0.913,0.92,4,1,0.0718,0.0869,0.0803,-0.0085,-0.0013,然后用Requests来获取咱们的目标网页：. [python代码]
Oct 15 2018 21:06:49,40,25,47,57,1.22,0.83,0.832,0.832,4,1,0.1705,0.1677,0.1677,0.0028,0.0009,4.2.2 搜索文档树. 最常用的当然是find()和find_all()啦，当然还有其他的。比如find_parent() 和 find_parents()、 find_next_sibling() 和 find_next_siblings() 、find_all_next() 和 find_next()、find_all_previous() .
Oct 15 2018 21:06:55,38,46,122,38,0.31,0.191,0.125,0.437,4,1,0.8092,0.8754,0.5633,0.2459,0.3374,4.2.2 搜索文档树. 最常用的当然是find()和find_all()啦，当然还有其他的。比如find_parent() 和 find_parents()、 find_next_sibling() 和 find_next_siblings() 、find_all_next() 和 find_next()、find_all_previous() .
Oct 15 2018 21:07:49,33,25,3,1,0.33,0.818,0.832,0.832,2,0,0.8176,0.8323,0.8323,-0.0147,-0.0243,4.2 BeautifulSoup遍历方法. 4.2.1 节点和标签名. 可以使用子节点、父节点、 及标签名的方式遍历：. soup.head #查找head标签. soup.p #查找第一个p标签. #对标签的直接子节点进行循环. for child in title_tag.children:.     print(child)soup .
Oct 15 2018 21:08:11,42,46,3,1,0.33,0.216,0.201,0.486,2,0,0.216,0.2011,0.4861,-0.2701,-0.1897,soup.find_all(_title_) . [.]. # soup.find_all(_p__ _title_) . # [<p class=_title_><b>The Dormouse_s story</b></p>] . # soup.find_all(_a_) . # [<a class=_sister_ href=_http .
Oct 15 2018 21:09:06,50,25,3,3,0.86,0.406,0.128,0.731,2,0,0.4062,0.1284,0.7313,-0.325,-0.3697,find_all(). 搜索当前tag的所有tag子节点，并判断是否符合过滤器的条件。返回值类型是bs4.element.ResultSet。. 完整的语法：. [.]
Oct 15 2018 21:09:37,49,46,3,1,0.46,0.169,0.234,0.507,2,0,0.1688,0.2337,0.5072,-0.3384,-0.2287,soup.find_all(_title_) . # [<title>The Dormouse_s story</title>] 查找所有tittle标签. # soup.find_all(_p__ _title_) . # [<p class=_title_><b>The Dormouse_s story</b></p>] .
Oct 15 2018 21:10:01,21,33,3,1,0.33,0.945,0.943,0.943,2,0,0.9448,0.9433,0.9433,0.0014,0.0027,4.1 BeautifulSoup对象的类型. Beautiful Soup将复杂HTML文档转换成一个复杂的树形结构，每个节点都是Python对象。所有对象可以归纳为4种类型: Tag _ NavigableString _ BeautifulSoup _ Comment 。下面我们分别看看这四种类型都是什么东西。. 4.1.1 Tag .
Oct 15 2018 21:10:18,10,25,2,1,0.5,0.336,0.071,0.755,2,0,0.3363,0.0709,0.7554,-0.4191,-0.4576,5.1 get 请求. get请求还可以传递参数：. [.]
Oct 15 2018 21:10:57,29,46,2,2,1.21,0.135,0.255,0.521,2,0,0.1347,0.2546,0.5207,-0.386,-0.253,4.1 BeautifulSoup对象的类型. Beautiful Soup将复杂HTML文档转换成一个复杂的树形结构，每个节点都是Python对象。所有对象可以归纳为4种类型: Tag _ NavigableString _ BeautifulSoup _ Comment 。下面我们分别看看这四种类型都是什么东西。. 4.1.4 Comment .
Oct 15 2018 21:11:38,41,46,109,37,0.34,0.154,0.279,0.536,4,1,0.8464,0.7213,0.4637,0.3827,0.5014,4.2.2 搜索文档树. 最常用的当然是find()和find_all()啦，当然还有其他的。比如find_parent() 和 find_parents()、 find_next_sibling() 和 find_next_siblings() 、find_all_next() 和 find_next()、find_all_previous() .
Oct 15 2018 21:11:52,32,46,111,37,0.33,0.172,0.258,0.523,4,1,0.8279,0.7417,0.4769,0.351,0.458,4.2 BeautifulSoup遍历方法. 4.2.1 节点和标签名. 可以使用子节点、父节点、 及标签名的方式遍历：. soup.head #查找head标签. soup.p #查找第一个p标签. #对标签的直接子节点进行循环. for child in title_tag.children:.     print(child)soup .
Oct 15 2018 21:11:59,37,33,78,66,0.85,0.945,0.947,0.947,4,1,0.055,0.0528,0.0528,0.0022,0.0002,4.2.2 搜索文档树. 最常用的当然是find()和find_all()啦，当然还有其他的。比如find_parent() 和 find_parents()、 find_next_sibling() 和 find_next_siblings() 、find_all_next() 和 find_next()、find_all_previous() .
Oct 15 2018 21:12:07,47,33,78,66,0.85,0.945,0.947,0.947,4,1,0.055,0.0528,0.0528,0.0022,0.0002,soup.find_all(_title_) . # [<title>The Dormouse_s story</title>] 查找所有tittle标签. # soup.find_all(_p__ _title_) . # [<p class=_title_><b>The Dormouse_s story</b></p>] .
Oct 15 2018 21:12:22,30,46,2,1,0.5,0.156,0.198,0.484,2,0,0.1556,0.1978,0.484,-0.3284,-0.2101,4.2 BeautifulSoup遍历方法. 4.2.1 节点和标签名. 可以使用子节点、父节点、 及标签名的方式遍历：. soup.head #查找head标签. soup.p #查找第一个p标签. #对标签的直接子节点进行循环. [.]soup.parent #父节点. # 所有父节点. for parent in link.parents .
Oct 15 2018 21:12:49,45,46,2,1,0.5,0.141,0.281,0.538,2,0,0.1413,0.2809,0.5377,-0.3964,-0.2691,soup.find_all(_title_) . # [<title>The Dormouse_s story</title>] 查找tittle标签. # soup.find_all(_p__ _title_) . [.]. # soup.find_all(_a_) . # [<a class=_sister_ href=_http .
Oct 15 2018 21:13:04,24,33,115,66,0.57,0.944,0.947,0.947,5,1,0.0564,0.0528,0.0528,0.0036,0.0004,from bs4 import BeautifulSoup. html_doc = ___. <html><head><title>The Dormouse_s story</title></head>. <body>. <p class=_title_><b>The Dormouse_s story</b></p>. <p .
Oct 15 2018 21:13:39,31,46,2,1,0.5,0.129,0.188,0.478,2,0,0.129,0.1881,0.4777,-0.3487,-0.2116,4.2 BeautifulSoup遍历方法. 4.2.1 节点和标签名. 可以使用子节点、父节点、 及标签名的方式遍历：. soup.head #查找head标签. soup.p #查找第一个p标签. #对标签的直接子节点进行循环. for child in title_tag.children:.     print(child)soup .
Oct 15 2018 21:13:44,46,46,117,37,0.32,0.144,0.206,0.489,5,1,0.8558,0.7943,0.5109,0.3449,0.4713,soup.find_all(_title_) . # [<title>The Dormouse_s story</title>] 查找所有tittle标签. # soup.find_all(_p__ _title_) . # [<p class=_title_><b>The Dormouse_s story</b></p>] .
Oct 15 2018 21:13:55,43,46,118,73,0.62,0.159,0.05,0.816,4,1,0.8409,0.9503,0.1838,0.657,0.6732,[.]. # [<title>The Dormouse_s story</title>] 查找tittle标签. # soup.find_all(_p__ _title_) . # [<p class=_title_><b>The Dormouse_s story</b></p>] . # soup.find_all(_a_) . # [<a .
Oct 15 2018 21:14:00,39,33,79,69,0.87,0.946,0.95,0.95,4,1,0.0544,0.0497,0.0497,0.0047,0.0005,4.2.2 搜索文档树. 最常用的当然是find()和find_all()啦，当然还有其他的。比如find_parent() 和 find_parents()、 find_next_sibling() 和 find_next_siblings() 、find_all_next() 和 find_next()、find_all_previous() .
Oct 15 2018 21:14:07,48,46,120,71,0.59,0.174,0.086,0.823,4,1,0.8261,0.914,0.177,0.6491,0.6511,soup.find_all(_title_) . # [<title>The Dormouse_s story</title>] 查找所有tittle标签. # soup.find_all(_p__ _title_) . # [<p class=_title_><b>The Dormouse_s story</b></p>] .
Oct 15 2018 21:14:30,25,25,33,45,1.38,0.379,0.071,0.82,4,1,0.6207,0.9291,0.1798,0.4409,0.3529,from bs4 import BeautifulSoup. html_doc = ___. <html><head><title>The Dormouse_s story</title></head>. <body>. <p class=_title_><b>The Dormouse_s story</b></p>. <p .
Oct 15 2018 21:14:52,12,46,3,1,0.33,0.2,0.14,0.447,2,0,0.1997,0.1403,0.4469,-0.2471,-0.1598,5.2 POST请求. [.]. post请求多用来提交表单数据，即填写一堆输入框，然后提交。
Oct 15 2018 21:14:59,23,25,2,1,0.56,0.331,0.071,0.149,2,0,0.3311,0.0709,0.1494,0.1817,0.0873,from bs4 import BeautifulSoup. html_doc = ___. <html><head><title>The Dormouse_s story</title></head>. <body>. <p class=_title_><b>The Dormouse_s story</b></p>. <p .
Oct 15 2018 21:15:11,9,46,121,37,0.31,0.181,0.241,0.512,5,1,0.8193,0.7587,0.4879,0.3314,0.4331,我们再创建一个python文件，输入第一行代码来导入requests库：. [.]
Oct 15 2018 21:15:24,27,46,122,37,0.3,0.194,0.24,0.511,5,1,0.8058,0.7599,0.4887,0.3171,0.4105,from bs4 import BeautifulSoup. html_doc = ___. <html><head><title>The Dormouse_s story</title></head>. <body>. <p class=_title_><b>The Dormouse_s story</b></p>. <p .
Oct 15 2018 21:16:34,20,46,123,37,0.3,0.207,0.155,0.456,4,1,0.7928,0.8451,0.5437,0.2491,0.3329,4.1 BeautifulSoup对象的类型. Beautiful Soup将复杂HTML文档转换成一个复杂的树形结构，每个节点都是Python对象。所有对象可以归纳为4种类型: Tag _ NavigableString _ BeautifulSoup _ Comment 。下面我们分别看看这四种类型都是什么东西。. 4.1.1 Tag .
