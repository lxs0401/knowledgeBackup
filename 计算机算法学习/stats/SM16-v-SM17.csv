Date, Element No, Used interval, SM16 Interval (new), SM17 Interval (new), SM17/SM16 Interval ratio, R (SM16), R (SM17)(exp), R (SM17), Grade, Success, abs RM16, abs RM17 (expected), abs RM17 (predicted), abs R-Metric, sqr R-Metric, Title,
May 10 2018 07:03:01,41,4,2,1,0.5,0.817,0.889,0.917,2,0,0.8171,0.8894,0.9168,-0.0996,-0.1727,完全背包模板
May 10 2018 07:03:21,23,19,2,1,0.5,0.288,0.521,0.806,1,0,0.2884,0.5207,0.8056,-0.5172,-0.5659,5.一定要注意的问题：. 原数组，存储所有子集的数组，还有用来存储任意个数二进制个数的数组大小都要开到[.]次方。另，当n <= 20时，时间空间都可以容纳2^20
May 11 2018 08:00:04,42,5,17,22,1.28,0.714,0.858,0.898,4,1,0.2855,0.1424,0.1015,0.184,0.0712,完全背包模板
May 11 2018 08:00:25,41,1,2,7,3.4,0.951,0.896,0.896,4,1,0.0489,0.1038,0.1038,-0.0549,-0.0084,完全背包模板
May 11 2018 08:00:33,23,1,2,7,3.4,0.956,0.896,0.896,4,1,0.0444,0.1038,0.1038,-0.0594,-0.0088,5.一定要注意的问题：. 原数组，存储所有子集的数组，还有用来存储任意个数二进制个数的数组大小都要开到[.]次方。另，当n <= 20时，时间空间都可以容纳2^20
May 11 2018 08:00:50,27,5,15,22,1.46,0.799,0.857,0.898,4,1,0.2013,0.1433,0.1015,0.0998,0.0302,01二维
May 11 2018 08:01:07,12,11,28,26,0.92,0.98,0.95,0.95,4,1,0.0201,0.0503,0.0503,-0.0301,-0.0021,*************************************************分割线. 树状数组  重点是在树状的数组. 大家都知道二叉树吧. 叶子结点代表A数组A[1]~A[8]. 现在变形一下.  现在定义每一列的顶端结点C[]数组 .  如下图. C[i]代表 子树的叶子结点的权值之和// 这里以求和举例 .
May 12 2018 09:10:30,30,6,2,1,0.5,0.755,0.826,0.885,2,0,0.7553,0.8262,0.8846,-0.1292,-0.2119,01一维
May 12 2018 09:10:36,21,21,58,29,0.49,0.406,0.484,0.8,4,1,0.5939,0.5162,0.2,0.394,0.3128,1.(k&-k)在状态压缩和树状数组中都经常能够看到，那么（k&-k）的值是什么含义呢？. 这个值是把k的二进制的高位1全部清空，只留下最低位的1，当然如果只有一位1，则保留等于k本身。该操作就是留下k二进制数中最低位的一个1. 2.两种相等的形式：i-(i&-i) = i^(i&-i). 他们都表示减去最低位的1，再返回值. 3 .
May 13 2018 08:22:59,30,1,2,6,3.14,0.959,0.903,0.903,4,1,0.041,0.0969,0.0969,-0.0559,-0.0077,01一维
May 15 2018 09:11:00,10,25,62,33,0.54,0.426,0.424,0.8,4,1,0.5743,0.5761,0.2,0.3744,0.2899,*************************************************分割线. 树状数组  重点是在树状的数组. 大家都知道二叉树吧. 叶子结点代表A数组A[1]~A[8]. 现在变形一下.  现在定义每一列的顶端结点C[]数组 .  如下图. C[i]代表 子树的叶子结点的权值之和// 这里以求和举例 .
May 15 2018 09:11:39,42,4,3,1,0.33,0.985,0.971,0.971,2,0,0.9853,0.9709,0.9709,0.0144,0.0282,完全背包模板
May 15 2018 09:12:20,18,24,63,32,0.51,0.481,0.435,0.8,3,1,0.5191,0.5646,0.2,0.3191,0.2295,1.(k&-k)在状态压缩和树状数组中都经常能够看到，那么（k&-k）的值是什么含义呢？. 这个值是把k的二进制的高位1全部清空，只留下最低位的1，当然如果只有一位1，则保留等于k本身。该操作就是留下k二进制数中最低位的一个1. 2.两种相等的形式：i-(i&-i) = i^(i&-i). 他们都表示减去最低位的1，再返回值. 3 .
May 15 2018 09:13:15,14,25,68,33,0.49,0.5,0.424,0.8,3,1,0.5,0.5759,0.2,0.3,0.21,树状数组区间查询. ok 下面利用C[i]数组，求A数组中前i项的和 . 举个例子 i=7;. sum[7]=A[1]+A[2]+A[3]+A[4]+A[5]+A[6]+A[7] ;   前i项和. C[4]=A[1]+A[2]+A[3]+A[4];   C[6]=A[5]+A[6];   C[7]=A[7];. 可以推出 .
May 15 2018 09:13:36,44,3,13,11,0.83,0.919,0.917,0.943,4,1,0.0806,0.0827,0.0568,0.0237,0.0033,线段树pushUp
May 15 2018 09:14:48,66,1,3,1,0.33,0.972,0.98,0.99,2,0,0.9718,0.9805,0.99,-0.0182,-0.0358,我们可以在 O ( lgn )时间内完成向一棵含 n 个结点的红黑树中插入一个新结点。为了做到这一点，利用 TREE-INSERT 过程(参见12. 3 节）的一个略作修改的版本来将结点 z 插入树 T 内，就好像了是一棵普通的二叉搜索树一样，然后将 z 着为红色。（练 习 13. 3-1要求解释为什么选择将结点 z .
May 15 2018 09:15:31,34,9,25,18,0.71,0.775,0.743,0.856,3,1,0.2247,0.257,0.1441,0.0806,0.0297,01二维
May 15 2018 09:16:23,12,4,27,35,1.29,0.99,0.987,0.987,3,1,0.0098,0.0126,0.0126,-0.0028,-0.0001,*************************************************分割线. 树状数组  重点是在树状的数组. 大家都知道二叉树吧. 叶子结点代表A数组A[1]~A[8]. 现在变形一下.  现在定义每一列的顶端结点C[]数组 .  如下图. C[i]代表 子树的叶子结点的权值之和// 这里以求和举例 .
May 15 2018 09:16:36,54,1,17,5,0.32,0.972,0.979,0.99,4,1,0.0281,0.021,0.01,0.0182,0.0007,搜索树操作TREE - INSERT 和TREE - DELETE 在含n个关键字的红黑树上，运行花费时间为[.]
May 15 2018 09:16:48,57,1,30,8,0.28,0.972,0.963,0.99,4,1,0.0283,0.0369,0.01,0.0184,0.0007,结点属性
May 15 2018 09:17:42,23,4,8,14,1.78,0.839,0.929,0.929,3,1,0.161,0.0715,0.0715,0.0896,0.0208,5.一定要注意的问题：. 状态压缩数组大小都要开到[.]次方。
May 15 2018 09:18:23,27,4,23,15,0.67,0.983,0.971,0.971,3,1,0.0174,0.0291,0.0291,-0.0117,-0.0005,01二维
May 15 2018 09:18:41,60,1,3,1,0.33,0.971,0.963,0.99,2,0,0.9711,0.9631,0.99,-0.0189,-0.0371,黑高
May 15 2018 09:21:43,40,9,30,18,0.59,0.771,0.744,0.856,4,1,0.2288,0.2563,0.1441,0.0847,0.0316,完全背包模板
May 15 2018 09:22:24,38,9,20,18,0.88,0.774,0.743,0.856,3,1,0.2259,0.2566,0.1441,0.0818,0.0303,01一维
May 15 2018 09:22:52,35,9,40,18,0.44,0.777,0.743,0.856,4,1,0.2229,0.2571,0.1441,0.0788,0.0289,01二维
May 15 2018 09:23:32,20,24,63,32,0.51,0.542,0.435,0.8,4,1,0.458,0.5647,0.2,0.258,0.1697,状态压缩
May 15 2018 09:23:52,56,1,5,8,1.69,0.975,0.963,0.99,4,1,0.0253,0.0371,0.01,0.0153,0.0005,平衡性
May 15 2018 09:29:39,11,25,4,1,0.25,0.504,0.424,0.8,2,0,0.5036,0.4238,0.8,-0.2964,-0.3864,*************************************************分割线. 树状数组  重点是在树状的数组. 大家都知道二叉树吧. 叶子结点代表A数组A[1]~A[8]. 现在变形一下.  现在定义每一列的顶端结点C[]数组 .  如下图. C[i]代表 子树的叶子结点的权值之和// 这里以求和举例 .
May 15 2018 09:31:48,33,9,23,18,0.77,0.783,0.743,0.856,4,1,0.2165,0.2573,0.1441,0.0725,0.0261,01二维
May 15 2018 09:32:26,25,24,64,32,0.51,0.547,0.435,0.8,3,1,0.4527,0.5647,0.2,0.2527,0.165,状态压缩
May 15 2018 09:32:44,29,3,26,11,0.42,0.927,0.917,0.943,4,1,0.0727,0.0831,0.0568,0.0159,0.0021,线段树类型定义
May 15 2018 09:33:10,50,3,30,11,0.36,0.927,0.917,0.943,4,1,0.0728,0.0831,0.0568,0.0159,0.0021,线段树add
May 15 2018 09:33:38,41,4,9,14,1.59,0.839,0.928,0.928,4,1,0.161,0.0716,0.0716,0.0894,0.0208,完全背包模板
May 15 2018 09:34:08,58,1,32,8,0.27,0.975,0.963,0.99,4,1,0.0249,0.0373,0.01,0.015,0.0005,性质
May 15 2018 09:35:57,63,1,11,5,0.5,0.975,0.979,0.99,3,1,0.025,0.0214,0.01,0.015,0.0005,由于这两个操作对树做了修改，结果可能违反13.1节中列出的红黑性质。为了维护这些性质，必须要改变树中某些结点的颜色以及指针结构。.     指针结构的修改是通过旋转 ( ratation )来完成的，这是一种能保持二叉搜索树性质的搜索树局部操作。图 13-2中给出了两种旋转：左旋和右旋。当在某个结点x上做左旋时，假设它的右孩子为y而不是 T.nil .
May 15 2018 09:36:29,36,9,4,1,0.25,0.787,0.743,0.856,2,0,0.7869,0.7431,0.8559,-0.0691,-0.1135,01一维
May 15 2018 09:36:59,24,24,3,1,0.33,0.504,0.435,0.8,2,0,0.504,0.4352,0.8,-0.296,-0.386,状态压缩
May 15 2018 09:37:22,59,1,9,9,0.95,0.972,0.963,0.99,4,1,0.0282,0.0374,0.01,0.0183,0.0007,为了便于处理红黑树代码中的边界条件，使用一个哨兵来代表 NIL (参见10.2节）。对于一棵红黑树 T _ 哨兵 T.nil 是一个与树中普通结点有相同属性的对象。它 的 ccolor 属性为BLACK ，而其他属性p、left、right 和key可以设为[.]。如图13- l ( b )所示，所有指向 NIL 的指针都用指向哨兵T.nil .
May 15 2018 09:39:00,30,2,6,6,1.08,0.916,0.961,0.961,4,1,0.0841,0.0389,0.0389,0.0451,0.0056,01一维
May 15 2018 09:40:03,15,18,44,54,1.22,0.954,0.884,0.884,4,1,0.0464,0.1162,0.1162,-0.0698,-0.0113,*************************************************分割线. 单点更新. 当我们修改A[]数组中的某一个值时  应当如何更新C[]数组呢？. 回想一下 区间查询的过程，再看一下上文中列出的图. 结合代码分析. void add(int x_int y) . { . for(int .
May 15 2018 09:41:01,65,1,25,5,0.21,0.972,0.98,0.99,4,1,0.0283,0.0201,0.01,0.0184,0.0007,我们可以在 O ( lgn )时间内完成向一棵含 n 个结点的红黑树中插入一个新结点。为了做到这一点，利用 TREE-INSERT 过程(参见12. 3 节）的一个略作修改的版本来将结点 z 插入树 T 内，就好像了是一棵普通的二叉搜索树一样，然后将 z 着为红色。（练 习 13. 3-1要求解释为什么选择将结点 z .
May 15 2018 09:41:05,7,19,40,86,2.15,0.883,0.881,0.881,4,1,0.1167,0.1189,0.1189,-0.0022,-0.0005,树状数组彻底入门int lowbit(int t) . { . [.] . }. void add(int x_int y) . { . for(int i=x;i<=n;i+=lowbit(i)) . tree[i]+=y; . }. int getsum(int x) . { . int ans=0; . for(int i=x;i>0;i .
May 15 2018 09:42:34,16,20,51,57,1.11,0.929,0.864,0.864,4,1,0.0713,0.1364,0.1364,-0.0651,-0.0135,树状数组彻底入门int lowbit(int t) . { . return t&(-t); . }. [.].      这篇笔记 会详细的讲解，使得队员们对树状数组彻底入门  而不是懵懵懂懂。. 以上先给出 最常见的，三个函数。(单点更新，区间查询).      网上的解释以及分析有很多，这里是我的一点总结和体会归纳一下，并且在周三(2016 .
May 16 2018 06:53:11,66,1,2,6,2.81,0.97,0.909,0.909,3,1,0.0298,0.0906,0.0906,-0.0608,-0.0073,我们可以在 O ( lgn )时间内完成向一棵含 n 个结点的红黑树中插入一个新结点。为了做到这一点，利用 TREE-INSERT 过程(参见12. 3 节）的一个略作修改的版本来将结点 z 插入树 T 内，就好像了是一棵普通的二叉搜索树一样，然后将 z 着为红色。（练 习 13. 3-1要求解释为什么选择将结点 z .
May 16 2018 06:53:33,60,1,2,6,2.8,0.971,0.91,0.91,4,1,0.029,0.0904,0.0904,-0.0614,-0.0073,黑高
May 16 2018 06:53:41,11,1,2,6,2.76,0.972,0.91,0.91,4,1,0.0282,0.0897,0.0897,-0.0615,-0.0072,*************************************************分割线. 树状数组  重点是在树状的数组. 大家都知道二叉树吧. 叶子结点代表A数组A[1]~A[8]. 现在变形一下.  现在定义每一列的顶端结点C[]数组 .  如下图. C[i]代表 子树的叶子结点的权值之和// 这里以求和举例 .
May 16 2018 06:53:51,42,1,2,2,1.13,0.973,0.909,0.909,4,1,0.0274,0.0909,0.0909,-0.0635,-0.0075,完全背包模板
May 16 2018 06:54:07,36,1,2,5,2.74,0.973,0.911,0.911,4,1,0.0267,0.0892,0.0892,-0.0626,-0.0073,01一维
May 16 2018 06:54:15,24,1,2,5,2.74,0.974,0.911,0.911,5,1,0.026,0.0892,0.0892,-0.0632,-0.0073,状态压缩
May 18 2018 07:33:12,46,3,6,12,2.01,0.931,0.925,0.917,4,1,0.0694,0.0749,0.0832,-0.0138,-0.0021,线段树build
May 18 2018 07:34:04,47,3,6,12,2.01,0.93,0.925,0.917,4,1,0.0697,0.0749,0.0832,-0.0135,-0.0021,线段树search
May 18 2018 07:35:06,49,3,4,1,0.25,0.929,0.925,0.917,2,0,0.9289,0.925,0.9168,0.0121,0.0224,线段树pushDown
May 18 2018 07:35:31,31,3,4,1,0.25,0.927,0.925,0.917,2,0,0.9274,0.9246,0.9168,0.0106,0.0196,线段树updata
May 18 2018 07:35:54,42,2,4,5,1.13,0.943,0.903,0.903,4,1,0.0569,0.097,0.097,-0.0401,-0.0062,完全背包模板
May 19 2018 09:37:55,49,1,2,7,3.5,0.973,0.892,0.892,4,1,0.0266,0.1081,0.1081,-0.0815,-0.011,线段树pushDown
May 19 2018 09:38:08,31,1,2,7,3.5,0.974,0.892,0.892,3,1,0.026,0.108,0.108,-0.0821,-0.011,线段树updata
May 20 2018 07:34:52,84,3,5,12,2.48,0.931,0.91,0.917,3,1,0.0694,0.0896,0.0832,-0.0139,-0.0021,void rbDeleteFixup(rbtree **root_rbtree *x). {.     rbtree *w;. [.].             w = x->p->rchild;.             if(w->color == RED) //情况1.             {.                 w .
May 20 2018 07:36:08,79,2,4,7,1.65,0.953,0.954,0.943,4,1,0.047,0.0458,0.0568,-0.0098,-0.001,void rbDeleteFixup(rbtree **root_rbtree *x). {.     rbtree *w;.     while(x != *root && x->color == BLACK).     {.         if(x == x->p->lchild)  //第4行.         { .
May 20 2018 07:37:20,68,3,6,9,1.54,0.93,0.936,0.943,4,1,0.07,0.0636,0.0568,0.0131,0.0017,1
May 20 2018 07:37:39,62,3,4,1,0.25,0.929,0.936,0.943,2,0,0.9285,0.9364,0.9432,-0.0147,-0.0274,2
May 20 2018 07:38:08,19,3,6,9,1.51,0.928,0.938,0.943,4,1,0.0717,0.0622,0.0568,0.0149,0.0019,void rbDeleteFixup(rbtree **root_rbtree *x). {.     rbtree *w;.     while(x != *root && x->color == BLACK).     {.         if(x == x->p->lchild)  //第4行.         { .
May 20 2018 07:39:11,63,3,5,23,4.64,0.928,0.994,0.943,3,1,0.072,0.0062,0.0568,0.0151,0.0019,由于这两个操作对树做了修改，结果可能违反13.1节中列出的红黑性质。为了维护这些性质，必须要改变树中某些结点的颜色以及指针结构。.     指针结构的修改是通过旋转 ( ratation )来完成的，这是一种能保持二叉搜索树性质的搜索树局部操作。图 13-2中给出了两种旋转：左旋和右旋。当在某个结点x上做左旋时，假设它的右孩子为y而不是 T.nil .
May 20 2018 07:40:50,65,5,4,1,0.25,0.823,0.964,0.964,2,0,0.8227,0.9638,0.9638,-0.141,-0.2519,我们可以在 O ( lgn )时间内完成向一棵含 n 个结点的红黑树中插入一个新结点。为了做到这一点，利用 TREE-INSERT 过程(参见12. 3 节）的一个略作修改的版本来将结点 z 插入树 T 内，就好像了是一棵普通的二叉搜索树一样，然后将 z 着为红色。（练 习 13. 3-1要求解释为什么选择将结点 z .
May 20 2018 07:40:59,54,5,12,15,1.26,0.823,0.964,0.964,4,1,0.1773,0.0363,0.0363,0.141,0.0301,搜索树操作TREE - INSERT 和TREE - DELETE 在含n个关键字的红黑树上，运行花费时间为[.]
May 20 2018 07:42:15,69,3,5,9,1.85,0.928,0.936,0.943,3,1,0.0721,0.0637,0.0568,0.0153,0.002,3
May 20 2018 07:42:29,45,3,6,9,1.53,0.928,0.937,0.943,4,1,0.0724,0.0631,0.0568,0.0155,0.002,4
May 20 2018 07:42:55,21,4,9,18,2.05,0.907,0.885,0.917,4,1,0.0927,0.1147,0.0832,0.0095,0.0017,红黑树旋转
